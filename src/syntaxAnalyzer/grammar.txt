

    TOKEN_OP_PLUS, // +
    TOKEN_OP_MINUS, // -
    TOKEN_OP_MUL, // *
    TOKEN_OP_DIV, // /
    TOKEN_OP_MOD, // %
    TOKEN_OP_EQUAL, // ==
    TOKEN_OP_GREATER, // >
    TOKEN_OP_GREATER_EQ, // >=
    TOKEN_OP_LESS, // <
    TOKEN_OP_LESS_EQ, // <=
    TOKEN_OP_NOT_EQUAL, // !=
    TOKEN_OP_AND, // &&
    TOKEN_OP_OR, // ||
    TOKEN_OP_NOT, // !
    TOKEN_OP_ASSIGNMENT,  // =
    TOKEN_OP_ADRESS, // &
    TOKEN_OP_DEREFERENCE, // @



priority_0
	: <IDENTIFIER>
	| <CONSTANT>
	| <STRING_LITERAL>
	| '(' expression ')'
	;


priority_1
	: priority_0 priority_1_tail
	;


priority_1_tail
    : '[' expression ']' priority_1_tail
    | '(' argument_list ')' priority_1_tail
    | e
    ;


argument_list
    : expression ',' argument_list
    ;



priority_2
	: priority_1
	| '-' priority_2 
	| '!' priority_2 
	| '&' priority_2 
	| '@' priority_2 
	;


priority_3
	: priority_2
	| priority_2 '*' priority_3 
	| priority_2 '/' priority_3 
	| priority_2 '%' priority_3 
	;


priority_4
	: priority_3
	| priority_3 '+' priority_4 
	| priority_3 '-' priority_4 
	;


priority_5
	: priority_4
	| priority_4 '>' priority_5 
	| priority_4 '<' priority_5
	| priority_4 '>=' priority_5 
	| priority_4 '<=' priority_5 
	| priority_4 '==' priority_5 
	| priority_4 '!=' priority_5 
	;


priority_6
	: priority_5
	| priority_5 '&&' priority_6 
	;


priority_7
	: priority_6
	| priority_6 '||' priority_7 
	;


expression
    : priority_7
    ;



assignment
	: id '=' expression 
	;


variable_defenition
    : type <IDENTIFIER>


statement
    : expression ';'
    | assignment ';'
    | variable_defenition ';'
    | if_statement
    | while_statement
    ;


statement_sequence
    : statement statement_sequence
    ;



body
    : '{' statement_sequence '}'
    ;



if_statement
    : 'if' '(' expression ')' body
    | 'if' '(' expression ')' body else body
    ;



while_statement
    : 'while' '(' expression ')' body
    ;


function_defenition
    : 'function' type <IDENTIFIER> '(' argument_list_defenition ')' body
    ;


argument_list_defenition
    : type <IDENTIFIER> argument_list_defenition
    ;



type
    : char
    | int
    | pointer
    | void
    ;


programm
    : function_defenition programm
    : global_variable programm
    | e
    ;